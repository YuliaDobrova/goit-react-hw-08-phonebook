{"version":3,"sources":["components/contactForm/ContactForm.module.css","components/contactList/ContactList.module.css","components/filter/FIlter.module.css","redux/contacts/contactsOperations.js","redux/contacts/contactsSelectors.js","components/contactForm/ContactForm.js","components/contactList/ContactList.js","components/filter/Filter.js","pages/ContactsPage.js"],"names":["module","exports","contactsOperations","addContact","newContact","dispatch","a","addContactRequest","axios","post","data","addContactSuccess","addContactError","message","deleteContact","id","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","fetchContacts","fetchContactsRequest","get","fetchContactsSuccess","fetchContactsError","getLoading","state","contacts","loading","getFilter","filter","getAllContacts","items","getVisibleContacts","createSelector","item","name","toLowerCase","includes","ContactForm","number","onHandleChange","e","target","value","setState","onHandleSubmit","preventDefault","console","log","props","find","contact","alert","this","className","styles","form","onSubmit","formName","formPhonebookText","formInput","type","autoComplete","placeholder","pattern","title","onChange","required","formButton","isLoadingContacts","color","height","width","Component","connect","onDeleteContact","contactList","length","map","contactListItem","contactListItemSpan","listItemButton","onClick","setFilter","filterName","filterInput","ContactsPage"],"mappings":"mIACAA,EAAOC,QAAU,CAAC,KAAO,0BAA0B,SAAW,8BAA8B,kBAAoB,yC,oBCAhHD,EAAOC,QAAU,CAAC,YAAc,iCAAiC,gBAAkB,qCAAqC,oBAAsB,yCAAyC,eAAiB,sC,oBCAxMD,EAAOC,QAAU,CAAC,WAAa,2BAA2B,kBAAoB,oC,oJCgD/DC,EAFY,CAAEC,WArBV,SAACC,GAAD,8CAAgB,WAAOC,GAAP,iBAAAC,EAAA,6DACjCD,EAASE,eADwB,kBAGRC,IAAMC,KAAK,YAAaL,GAHhB,gBAGvBM,EAHuB,EAGvBA,KACRL,EAASM,YAAkBD,IAJI,gDAM/BL,EAASO,YAAgB,KAAMC,UANA,yDAAhB,uDAqBsBC,cAXnB,SAACC,GAAD,8CAAQ,WAAOV,GAAP,SAAAC,EAAA,6DAC5BD,EAASW,eADmB,kBAIpBR,IAAMS,OAAN,oBAA0BF,IAJN,OAK1BV,EAASa,YAAqBH,IALJ,gDAO1BV,EAASc,YAAmB,KAAMN,UAPR,yDAAR,uDAWkCO,cA/BlC,yDAAM,WAAOf,GAAP,iBAAAC,EAAA,6DAC1BD,EAASgB,eADiB,kBAGDb,IAAMc,IAAI,aAHT,gBAGhBZ,EAHgB,EAGhBA,KACRL,EAASkB,YAAqBb,IAJN,gDAMxBL,EAASmB,YAAmB,KAAMX,UANV,yDAAN,wD,kDCdTY,EAAa,SAACC,GAAD,OAAWA,EAAMC,SAASC,SACvCC,EAAY,SAACH,GAAD,OAAWA,EAAMC,SAASG,QACtCC,EAAiB,SAACL,GAAD,OAAWA,EAAMC,SAASK,OAY3CC,EAAqBC,YAChC,CAACH,EAAgBF,IACjB,SAACG,EAAOF,GACN,OAAOE,EAAMF,QAAO,SAACK,GAAD,OAClBA,EAAKC,KAAKC,cAAcC,SAASR,EAAOO,qB,OCTxCE,E,4MACJb,MAAQ,CAAEU,KAAM,GAAII,OAAQ,I,EAM5BC,eAAiB,SAACC,GAChB,MAAwBA,EAAEC,OAAlBP,EAAR,EAAQA,KAAMQ,EAAd,EAAcA,MACd,EAAKC,SAAL,eAAiBT,EAAOQ,K,EAG1BE,eAAiB,SAACJ,GAChBA,EAAEK,iBACFC,QAAQC,IAAR,sBAAmC,EAAKC,MAAMvB,UACxB,EAAKuB,MAAMvB,SAASwB,MACxC,SAACC,GAAD,OAAaA,EAAQhB,KAAKC,gBAAkB,EAAKX,MAAMU,KAAKC,iBAG5DgB,MAAM,GAAD,OAAI,EAAK3B,MAAMU,KAAf,6BAGP,EAAKc,MAAM/C,WAAX,eAA2B,EAAKuB,QAChC,EAAKmB,SAAS,CAAET,KAAM,GAAII,OAAQ,O,uDApBpC,WACEc,KAAKJ,MAAM9B,kB,oBAsBb,WACE,OACE,uBAAMmC,UAAWC,IAAOC,KAAMC,SAAUJ,KAAKR,eAA7C,UACE,wBAAOS,UAAWC,IAAOG,SAAzB,UACE,sBAAMJ,UAAWC,IAAOI,kBAAxB,mBACA,uBACEL,UAAWC,IAAOK,UAClBC,KAAK,OACL1B,KAAK,OACL2B,aAAa,MACbC,YAAY,aACZC,QAAQ,yHACRC,MAAM,kcACNtB,MAAOU,KAAK5B,MAAMU,KAClB+B,SAAUb,KAAKb,eACf2B,UAAQ,OAGZ,wBAAOb,UAAWC,IAAOG,SAAzB,UACE,sBAAMJ,UAAWC,IAAOI,kBAAxB,0BACA,uBACEL,UAAWC,IAAOK,UAClBC,KAAK,MACL1B,KAAK,SACL2B,aAAa,MACbC,YAAY,qBACZC,QAAQ,yFACRC,MAAM,giBACNtB,MAAOU,KAAK5B,MAAMc,OAClB2B,SAAUb,KAAKb,eACf2B,UAAQ,OAGZ,wBAAQN,KAAK,SAASP,UAAWC,IAAOa,WAAxC,yBAGCf,KAAKJ,MAAMoB,mBACV,cAAC,IAAD,CAAQR,KAAK,YAAYS,MAAM,UAAUC,OAAQ,GAAIC,MAAO,Y,GA/D5CC,aAyFXC,eAbS,SAACjD,GAAD,MAAY,CAClCC,SAAUI,EAAeL,GACzB4C,kBAAmB7C,EAAWC,OAGL,SAACrB,GAC1B,MAAO,CACLe,cAAe,kBAAMf,EAASH,EAAmBkB,kBACjDjB,WAAY,SAACC,GAAD,OACVC,EAASH,EAAmBC,WAAWC,QAI9BuE,CAA6CpC,G,kBC7C7CoC,eApBS,SAACjD,GACvB,MAAO,CACLM,MAAOC,EAAmBP,OAcH,SAACrB,GAAD,MAAe,CACxCS,cAAe,SAACC,GAAD,OAAQV,EAASH,EAAmBY,cAAcC,QAGpD4D,EAjDK,SAAC,GAA8B,IAA5B3C,EAA2B,EAA3BA,MAAOlB,EAAoB,EAApBA,cAEtB8D,EAAkB,SAAClC,GACvB5B,EAAc4B,EAAEC,OAAO5B,KAGzB,OACE,mCACE,oBAAIwC,UAAWC,IAAOqB,YAAtB,SACG7C,EAAM8C,OAAS,GACd9C,EAAM+C,KAAI,gBAAG3C,EAAH,EAAGA,KAAMI,EAAT,EAASA,OAAQzB,EAAjB,EAAiBA,GAAjB,OACR,qBAAIwC,UAAWC,IAAOwB,gBAAtB,UACE,sBAAMzB,UAAWC,IAAOyB,oBAAxB,SAA8C7C,IADhD,IAEE,sBAAMmB,UAAWC,IAAOyB,oBAAxB,SAA8CzC,IAC9C,wBACEsB,KAAK,SACLP,UAAWC,IAAO0B,eAClBC,QAASP,EACT7D,GAAIA,EAJN,sBAH0CA,a,kBCSzC4D,eAJS,SAACjD,GAAD,MAAY,CAClCI,OAAQD,EAAUH,MAGoB,CAAE0D,UAAWA,KAAtCT,EApBA,SAAC,GAA2B,IAAzB7C,EAAwB,EAAxBA,OAAQsD,EAAgB,EAAhBA,UACxB,OACE,mCACE,wBAAO7B,UAAWC,IAAO6B,WAAzB,UACE,sBAAM9B,UAAWC,IAAOI,kBAAxB,kCACA,uBACEL,UAAWC,IAAO8B,YAClBxB,KAAK,OACLlB,MAAOd,EACPqC,SAAU,SAACzB,GAAD,OAAO0C,EAAU1C,EAAEC,OAAOC,kBCVxC2C,E,4MACJ7D,MAAQ,G,4CACR,WACE,OACE,qCACE,oBAAI6B,UAAU,aAAd,uBACA,cAAC,EAAD,IACA,oBAAIA,UAAU,aAAd,sBACA,cAAC,EAAD,IACA,cAAC,EAAD,W,GATmBmB,aAeZa","file":"static/js/3.8cc1ccd1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3xfSJ\",\"formName\":\"ContactForm_formName__35hCD\",\"formPhonebookText\":\"ContactForm_formPhonebookText__12hSO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__21X6r\",\"contactListItem\":\"ContactList_contactListItem___7xux\",\"contactListItemSpan\":\"ContactList_contactListItemSpan__1ePHo\",\"listItemButton\":\"ContactList_listItemButton__3fksU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterName\":\"FIlter_filterName__28jT1\",\"formPhonebookText\":\"FIlter_formPhonebookText__1uGdY\"};","import axios from \"axios\";\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n} from \"./contactsActions\";\r\n\r\n// axios.defaults.baseURL = \"https://connections-api.herokuapp.com\";\r\n// axios.defaults.baseURL = \"http://localhost:4040\";\r\n\r\nconst fetchContacts = () => async (dispatch) => {\r\n  dispatch(fetchContactsRequest());\r\n  try {\r\n    const { data } = await axios.get(\"/contacts\");\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error.message));\r\n  }\r\n};\r\n\r\nconst addContact = (newContact) => async (dispatch) => {\r\n  dispatch(addContactRequest());\r\n  try {\r\n    const { data } = await axios.post(\"/contacts\", newContact);\r\n    dispatch(addContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(addContactError(error.message));\r\n  }\r\n};\r\n\r\nconst deleteContact = (id) => async (dispatch) => {\r\n  dispatch(deleteContactRequest());\r\n  // console.log(`id`, id);\r\n  try {\r\n    await axios.delete(`/contacts/${id}`);\r\n    dispatch(deleteContactSuccess(id));\r\n  } catch (error) {\r\n    dispatch(deleteContactError(error.message));\r\n  }\r\n};\r\n\r\nconst contactsOperations = { addContact, deleteContact, fetchContacts };\r\n\r\nexport default contactsOperations;\r\n\r\n// ===================================================\r\n// const addContact = (newContact) => (dispatch) => {\r\n//   // dispatch({ type: \"contacts/addContactRequest\" });\r\n//   dispatch(addContactRequest());\r\n//   axios.post(\"/contacts.json\", newContact).then(({ data }) =>\r\n//     // dispatch({ type: \"contacts/addContactSuccess\", payload: data }).\r\n//     dispatch(addContactSuccess(data)).catch((error) =>\r\n//       // dispatch({ type: \"contacts/addContactError\", payload: error }))\r\n//       dispatch(addContactError(error))\r\n//     )\r\n//   );\r\n// };\r\n\r\n// До переписывания на асинхронную\r\n// const fetchContacts = () => (dispatch) => {\r\n//   dispatch(fetchContactsRequest());\r\n//   axios\r\n//     .get(\"/contacts.json\")\r\n//     .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n//     .catch((error) => dispatch(fetchContactsError(error)));\r\n// };\r\n\r\n// const addContact = (newContact) => (dispatch) => {\r\n//   dispatch(addContactRequest());\r\n//   axios\r\n//     .post(\"/contacts\", newContact)\r\n//     // .then(console.log);\r\n//     .then(({ data }) =>\r\n//       dispatch(addContactSuccess(data)).catch((error) =>\r\n//         dispatch(addContactError(error))\r\n//       )\r\n//     );\r\n// };\r\n\r\n// const deleteContact = (id) => (dispatch) => {\r\n//   dispatch(deleteContactRequest());\r\n//   axios\r\n//     .delete(`/contacts/${id}`)\r\n//     .then(() => dispatch(deleteContactSuccess(id)))\r\n//     .catch((error) => dispatch(deleteContactError(error)));\r\n// };\r\n\r\n// export default { addContact, deleteContact, fetchContacts };\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nexport const getLoading = (state) => state.contacts.loading;\r\nexport const getFilter = (state) => state.contacts.filter;\r\nexport const getAllContacts = (state) => state.contacts.items;\r\n\r\n// export const getVisibleContacts = (state) => {\r\n//   const allContacts = getAllContacts(state);\r\n//   const filter = getFilter(state);\r\n\r\n//   return allContacts.filter((item) =>\r\n//     item.name.toLowerCase().includes(filter.toLowerCase())\r\n//   );\r\n// };\r\n\r\n// Мемоизация\r\nexport const getVisibleContacts = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (items, filter) => {\r\n    return items.filter((item) =>\r\n      item.name.toLowerCase().includes(filter.toLowerCase())\r\n    );\r\n  }\r\n);\r\n","import React, { Component } from \"react\";\r\nimport contactsOperations from \"../../redux/contacts/contactsOperations\";\r\nimport { connect } from \"react-redux\";\r\nimport Loader from \"react-loader-spinner\";\r\n// import { v4 as uuidv4 } from \"uuid\";\r\nimport styles from \"./ContactForm.module.css\";\r\nimport {\r\n  getAllContacts,\r\n  getLoading,\r\n} from \"../../redux/contacts/contactsSelectors\";\r\n\r\nclass ContactForm extends Component {\r\n  state = { name: \"\", number: \"\" };\r\n\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n\r\n  onHandleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  onHandleSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log(`this.props.contacts`, this.props.contacts);\r\n    const addingContact = this.props.contacts.find(\r\n      (contact) => contact.name.toLowerCase() === this.state.name.toLowerCase()\r\n    );\r\n    if (addingContact) {\r\n      alert(`${this.state.name} is already in contacts`);\r\n      return;\r\n    }\r\n    this.props.addContact({ ...this.state });\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form className={styles.form} onSubmit={this.onHandleSubmit}>\r\n        <label className={styles.formName}>\r\n          <span className={styles.formPhonebookText}>Name:</span>\r\n          <input\r\n            className={styles.formInput}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            autoComplete=\"off\"\r\n            placeholder=\"Enter name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            value={this.state.name}\r\n            onChange={this.onHandleChange}\r\n            required\r\n          />\r\n        </label>\r\n        <label className={styles.formName}>\r\n          <span className={styles.formPhonebookText}>Phone№:</span>\r\n          <input\r\n            className={styles.formInput}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            autoComplete=\"off\"\r\n            placeholder=\"Enter phone number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            value={this.state.number}\r\n            onChange={this.onHandleChange}\r\n            required\r\n          />\r\n        </label>\r\n        <button type=\"submit\" className={styles.formButton}>\r\n          Add contact\r\n        </button>\r\n        {this.props.isLoadingContacts && (\r\n          <Loader type=\"ThreeDots\" color=\"#40e0d0\" height={70} width={70} />\r\n        )}\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\n// const mapStateToProps = (state) => {\r\n//   return {\r\n//     contacts: state.items,\r\n//   };\r\n// };\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: getAllContacts(state),\r\n  isLoadingContacts: getLoading(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\r\n    addContact: (newContact) =>\r\n      dispatch(contactsOperations.addContact(newContact)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n\r\n// ====================================================================\r\n// class ContactForm extends Component {\r\n//   state = { name: \"\", number: \"\" };\r\n\r\n//   onHandleChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     this.setState({ [name]: value });\r\n//   };\r\n\r\n//   onHandleSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     this.props.addContact({ ...this.state, id: uuidv4() });\r\n//     this.setState({ name: \"\", number: \"\" });\r\n//   };\r\n\r\n//   render() {\r\n//     return (\r\n//       <form className={styles.form} onSubmit={this.onHandleSubmit}>\r\n//         <label className={styles.formName}>\r\n//           Name:\r\n//           <input\r\n//             className={styles.formInput}\r\n//             type=\"text\"\r\n//             name=\"name\"\r\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n//             value={this.state.name}\r\n//             onChange={this.onHandleChange}\r\n//             required\r\n//           />\r\n//         </label>\r\n//         <label className={styles.formName}>\r\n//           Phone№:\r\n//           <input\r\n//             className={styles.formInput}\r\n//             type=\"tel\"\r\n//             name=\"number\"\r\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n//             value={this.state.number}\r\n//             onChange={this.onHandleChange}\r\n//             required\r\n//           />\r\n//         </label>\r\n//         <button type=\"submit\" className={styles.formButton}>\r\n//           Add contact\r\n//         </button>\r\n//       </form>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default ContactForm;\r\n","import React from \"react\";\r\nimport styles from \"./ContactList.module.css\";\r\nimport { connect } from \"react-redux\";\r\nimport contactsOperations from \"../../redux/contacts/contactsOperations\";\r\nimport { getVisibleContacts } from \"../../redux/contacts/contactsSelectors\";\r\n\r\nconst ContactList = ({ items, deleteContact }) => {\r\n  // console.log(`contacts list`, items);\r\n  const onDeleteContact = (e) => {\r\n    deleteContact(e.target.id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ul className={styles.contactList}>\r\n        {items.length > 0 &&\r\n          items.map(({ name, number, id }) => (\r\n            <li className={styles.contactListItem} key={id}>\r\n              <span className={styles.contactListItemSpan}>{name}</span>:\r\n              <span className={styles.contactListItemSpan}>{number}</span>\r\n              <button\r\n                type=\"button\"\r\n                className={styles.listItemButton}\r\n                onClick={onDeleteContact}\r\n                id={id}\r\n              >\r\n                Detete\r\n              </button>\r\n            </li>\r\n          ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    items: getVisibleContacts(state),\r\n  };\r\n};\r\n\r\n// До селектора:\r\n// const mapStateToProps = (state) => {\r\n//   // return { items: state.items };\r\n//   return {\r\n//     items: state.items.filter((item) =>\r\n//       item.name.toLowerCase().includes(state.filter.toLowerCase())\r\n//     ),\r\n//   };\r\n// };\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  deleteContact: (id) => dispatch(contactsOperations.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from \"react\";\r\nimport styles from \"./FIlter.module.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { setFilter } from \"../../redux/contacts/contactsActions\";\r\nimport { getFilter } from \"../../redux/contacts/contactsSelectors\";\r\n\r\nconst Filter = ({ filter, setFilter }) => {\r\n  return (\r\n    <>\r\n      <label className={styles.filterName}>\r\n        <span className={styles.formPhonebookText}>Find contact by name</span>\r\n        <input\r\n          className={styles.filterInput}\r\n          type=\"text\"\r\n          value={filter}\r\n          onChange={(e) => setFilter(e.target.value)}\r\n        />\r\n      </label>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  filter: getFilter(state),\r\n});\r\n\r\nexport default connect(mapStateToProps, { setFilter: setFilter })(Filter);\r\n","import React, { Component } from \"react\";\r\nimport ContactForm from \"../components/contactForm/ContactForm\";\r\nimport ContactList from \"../components/contactList/ContactList\";\r\nimport Filter from \"../components/filter/Filter\";\r\n\r\nclass ContactsPage extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <>\r\n        <h1 className=\"appHeading\">Phonebook</h1>\r\n        <ContactForm />\r\n        <h2 className=\"appHeading\">Contacts</h2>\r\n        <Filter />\r\n        <ContactList />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactsPage;\r\n"],"sourceRoot":""}